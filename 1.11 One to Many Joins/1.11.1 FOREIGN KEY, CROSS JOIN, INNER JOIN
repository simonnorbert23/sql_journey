CREATE TABLE customers(
id INT KEY AUTO_INCREMENT,
first_name VARCHAR(50),
last_name VARCHAR(50),
email VARCHAR(50));

CREATE TABLE orders(
id INT KEY AUTO_INCREMENT,
order_date DATE,
amount DECIMAL(8,2),
customer_id INT,
FOREIGN KEY(customer_id) REFERENCES customers(id));

INSERT INTO customers(first_name, last_name, email)
VALUES ('Boy', 'George', 'george@gmail.com'),
  ('George', 'Michael', 'gm@gmail.com'),
  ('David', 'Bowie', 'david@gmail.com'),
  ('Blue', 'Steele', 'blue@gmail.com'),
  ('Bette', 'Davis', 'bette@aol.com');
  
INSERT INTO orders (order_date, amount, customer_id)
VALUES ('2016-02-10', 99.99, 1),
  ('2017-11-11', 35.50, 1),
  ('2014-12-12', 800.67, 2),
  ('2015-01-03', 12.50, 2),
  ('1999-04-11', 450.25, 5);
  
-- the below won't work cause of foreign key constraint  
-- INSERT INTO orders(order_date, amount, customer_id) VALUES('2022-11-11', 50.68, 975);

INSERT INTO orders(order_date, amount, customer_id) VALUES('2022-11-11', 50.68, 3);

SELECT * FROM customers;
SELECT * FROM orders;

SELECT id FROM customers WHERE last_name = 'George';

SELECT * FROM orders WHERE customer_id = 1;

-- to merge the above 2 queries

SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE last_name = 'George');

-- The above information is fine but not complete, we need a join
-- a cross join combines every item from table A with every item from table but

SELECT * FROM customers, orders;

-- the above is not useful: it doesn't give us any relevant information, it's a dump

-- INNER JOIN targets the overlap between Table A and Table B

SELECT * FROM customers
INNER JOIN orders
  ON orders.customer_id = customers.id;
  
-- narrow down the selection

SELECT first_name, last_name, order_date, amount FROM customers
INNER JOIN orders
  ON orders.customer_id = customers.id;
  
-- we can reverse the order of how we join the tables

SELECT * FROM orders
INNER JOIN customers
  ON customers.id = orders.customer_id;

-- we can combine INNER JOIN with GROUP BY

SELECT first_name, last_name, order_date, amount FROM customers
INNER JOIN orders ON orders.customer_id = customers.id;

-- to find the total amount of each customer has spent

SELECT first_name, last_name, SUM(amount) AS total FROM customers
INNER JOIN orders ON orders.customer_id = customers.id
GROUP BY first_name, last_name
ORDER BY total DESC;


Source: https://www.udemy.com/course/the-ultimate-mysql-bootcamp-go-from-sql-beginner-to-expert/learn
