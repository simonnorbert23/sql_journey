## we're working with the books table of the previous chapter

SELECT database();

INSERT INTO books (title, author_fname, author_lname, released_year, stock_quantity, pages) 
VALUES ('10% Happier', 'Dan', 'Harris', 2014, 29, 256), 
('fake_book', 'Freida', 'Harris', 2001, 287, 428), 
('Lincoln In The Bardo', 'George', 'Saunders', 2017, 1000, 367);

## we can eliminate duplicate results and have distinct results printed only
SELECT DISTINCT author_lname FROM books;
SELECT DISTINCT released_year FROM books;

## in order to get distinct author full names
SELECT DISTINCT CONCAT(author_fname, ' ', author_lname) FROM books;

## the below is a cleaner option for the above, as DISTINCT will check for unique combinations
SELECT DISTINCT author_fname, author_lname FROM books;

## we can add further columns widen the selection: we will get every unique combination of the three columns
SELECT DISTINCT author_fname, author_lname, released_year FROM books;

## we can sort our selection with the help of ORDER BY
SELECT book_id, title, author_fname, author_lname FROM books ORDER BY author_lname;

## by default the sorting happens in ascending order, but we reverse it with DESC following ORDER BY:
SELECT book_id, author_fname, author_lname FROM books ORDER BY author_fname DESC;

## we can sort by numbers too
SELECT title, pages FROM books ORDER BY pages DESC;

## we can sort the selection by a column that is not actually in the selection
SELECT title, pages FROM books ORDER BY released_year ASC;

## we can ORDER BY mentioning the column number. Below we will ORDER BY the forth column (pages) - not transparent, rarely used
SELECT book_id, author_fname, author_lname, pages FROM books ORDER BY 4 DESC;

## we can sort by multiple columns. It will be interpreted like 'sort by first specified column, then by second specified column, etc'
SELECT author_lname, released_year, title FROM books ORDER BY author_lname, released_year DESC;

## we can sort by an aliased selection
SELECT CONCAT(author_fname, ' ', author_lname) AS author FROM books ORDER BY author;

## we can control the number of results we get back. LIMIT followd the ORDER BY clause. Let's fetch the first earliest released books from our list
SELECT book_id, title, released_year FROM books ORDER BY released_year LIMIT 5;

## if we use two numbers, the forst one specifies the starting row of the selection, the second one specifies the number of returned items
SELECT book_id, title, released_year FROM books ORDER BY released_year LIMIT 3, 5;

## if we ask for more results than what the table contains, it will return the maximum number of results possible
SELECT title ORDER BY tite LIMIT 40;

## for basic searching we can use the LIKE operator and wildcard % signs. The % sign means 'potentially 0 or more characters'
SELECT 
    title, author_fname, author_lname
FROM
    books
WHERE
    author_fname LIKE '%da%';
    
SELECT * FROM books WHERE title LIKE '%:%';

## we can use underscore to specify the number of characters we're looking for, where one _ sign equals one character
SELECT * FROM books WHERE author_fname LIKE '___';

## when we're looking for something we know the ending of:
SELECT * FROM books WHERE author_fname LIKE '%n';

## when we're looking for something that we know the middle of:
SELECT * FROM books WHERE author_fname LIKE '_a_';

## but what if there is a % sign or an _ in the column we're searching? We can escape the wildcard with a \. For example we can look for a % sign in the title
SELECT * FROM books WHERE title LIKE '%\%%';
SELECT * FROM books WHERE title LIKE '%\_%';


source: https://www.udemy.com/course/the-ultimate-mysql-bootcamp-go-from-sql-beginner-to-expert/learn
