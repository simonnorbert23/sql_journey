# CHAR and VARCHAR

# we can specify the length
CREATE TABLE friends (name VARCHAR(10));

# CHAR has a fixed length
CREATE TABLE states(abbr CHAR(2));
INSERT INTO states (abbr) VALUES ('CA'), ('NY');
SELECT * FROM states;

# if we add one charcter less, SQL will add a whitespace to compensate for the seocnd one
INSERT INTO states (abbr) VALUES ('C');
SELECT * FROM states;

# VARCHAR is optimized to store stuff that varies in length
# CHAR can be wasteful as it optimizes for a fixed size of characters. Good for country abbreviations, zip codes, etc.

# with either data type when we exceed the limit
INSERT INTO states (abbr) VALUES ('x');
SELECT * FROM states;
INSERT INTO states (abbr) VALUES ('Ohio');
# Error
# Ohio didn't make it into the table

# Number Types

# INT = whole number, 4bytes, maximum signed value is about 2.1 bn
# TINYINT = 1byte, 127 max
# If we use UNSIGNED values, we can increase the maximum, but the minimum will be 0, no negative values allowed

# Decimals - most precise

CREATE TABLE parent (children INT);
INSERT INTO parent(children) VALUES (1.5);
SELECT * FROM parent;

# need to specify total number of digits and the number of digits after the decimal point

CREATE TABLE products (price DECIMAL(5,2));
INSERT INTO products (price) VALUES (4.50);
INSERT INTO products (price) VALUES (412.50);
INSERT INTO products (price) VALUES (4125.50); # out of range error
INSERT INTO products (price) VALUES (34.026); # no error but will be truncated -> less precise
SELECT * FROM products;

# FLOAT and DOUBLE

# DECIMAL takes up more space, FLOAT takes less place but it's also less precise
# DOUBLE takes up more place than float but allows for more digits

CREATE TABLE nums (x FLOAT, y DOUBLE);
INSERT INTO nums (x,y) VALUES (1.123, 1.123);
INSERT INTO nums (x,y) VALUES (1.12345678, 1.1234568); # we didn't loose precision yet, but we will if we add more digits
SELECT * FROM nums;
